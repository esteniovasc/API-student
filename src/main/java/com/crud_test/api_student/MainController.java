package com.crud_test.api_student;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="/students") // This means URL's start with /students (after Application path)

@CrossOrigin(origins = "http://localhost:4200") // permite o servico do angular comunicar-se com a API

public class MainController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data

    private StudentRepository studentRepository;

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Student> getAllUsers() {
        // This returns a JSON or XML with the users
        return studentRepository.findAll();
    }

    @GetMapping(path="/all/{id}")
    public @ResponseBody Optional<Student> getStudentById(@PathVariable int id) {
        return studentRepository.findById(id);
    }

    @PostMapping(path="/add") // Map ONLY POST Requests
    public  ResponseEntity<String>  addStudent (@RequestParam String name, @RequestParam String turma) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Student n = new Student();
        n.setName(name);
        n.setTurma(turma);
        studentRepository.save(n);

        return ResponseEntity
                .status(HttpStatus.OK)
                .build();
    }

    @PutMapping(path="/update/{id}")
    public @ResponseBody Student replaceStudent (Student newStudent, @PathVariable int id){

        return studentRepository.findById(id)
                .map(student -> {
                    student.setName(newStudent.getName());
                    student.setTurma(newStudent.getTurma());
                    return studentRepository.save(student);
                })
                .orElseGet(() -> {
                    return studentRepository.save(newStudent);
                });

    }

    @DeleteMapping(path = "/delete/{id}")
    public ResponseEntity<String> deleteStudent (@PathVariable int id){

        Optional<Student> studentOptional = studentRepository.findById(id);

        if(!studentOptional.isPresent()){
            return ResponseEntity
                    .status(HttpStatus.NOT_FOUND)
                    .build();
        }

        studentRepository.delete(studentOptional.get());

        return ResponseEntity
                .status(HttpStatus.ACCEPTED)
                .build();
    }

}